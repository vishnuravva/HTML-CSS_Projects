
 /* The min-height CSS property sets the minimum height of an element. 
    It prevents the used value of the height property from becoming smaller than the value specified for min-height.*/

    /* flex-wrap is a CSS property that is used with the Flexbox layout module to control how flex items are wrapped and displayed within a flex container.
By default, flex items are displayed in a single line (or row), and when they exceed the width of the container, they overflow outside of the container. 
However, with flex-wrap, you can control how the items are wrapped when they exceed the width of the container.*/
/* wrap: This value allows flex items to wrap onto multiple lines (or columns) when they exceed the container's width. 
The items will be displayed in as many lines as necessary to fit inside the container.*/

/* transition is a CSS property that allows you to smoothly animate changes in CSS properties over a specified duration and timing function.
In the example you provided, transition: all 0.1s linear;, the transition property is being used to apply 
a transition effect to all CSS properties with a duration of 0.1 seconds and a linear timing function. */
/* The all keyword specifies that the transition should apply to all properties that are changed, rather than just specific ones. 
This means that if any CSS property changes on an element, such as its width or background color, the transition effect will be applied.

The 0.1s value specifies the duration of the transition effect in seconds. In this case, the duration is set to a very short 0.1 seconds, 
which means that the transition will happen quickly.

The linear keyword specifies the timing function for the transition effect. 
A linear timing function means that the transition will happen at a constant speed from start to finish, with no acceleration or deceleration.

So overall, transition: all 0.1s linear; means that any changes to CSS properties on an element will be smoothly animated over a duration of 0.1 seconds, using a constant speed.
*/

/* ===== Google Font Import - Poppins ===== */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600&display=swap');
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}
body{
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #4070f4;
}
.container{
    position: relative;
    max-width: 900px;
    width: 100%;
    border-radius: 6px;
    padding: 30px;
    margin: 0 15px;
    background-color: #fff;
    box-shadow: 0 5px 10px rgba(0,0,0,0.1);
}
.container header{
    position: relative;
    font-size: 20px;
    font-weight: 600;
    color: #333;
}
.container header::before{
    content: "";
    position: absolute;
    left: 0;
    bottom: -2px;
    height: 3px;
    width: 27px;
    border-radius: 8px;
    background-color: #4070f4;
}
.container form{
    position: relative;
    margin-top: 16px;
    min-height: 490px;
    background-color: #fff;
    overflow: hidden;
}
.container form .form{
    position: absolute;
    background-color: #fff;
    transition: 0.3s ease;
}
.container form .form.second{
    opacity: 0;
    pointer-events: none;
    transform: translateX(100%);
}
form.secActive .form.second{
    opacity: 1;
    pointer-events: auto;
    transform: translateX(0);
}
form.secActive .form.first{
    opacity: 0;
    pointer-events: none;
    transform: translateX(-100%);
}
.container form .title{
    display: block;
    margin-bottom: 8px;
    font-size: 16px;
    font-weight: 500;
    margin: 6px 0;
    color: #333;
}
.container form .fields{
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
}
form .fields .input-field{
    display: flex;
    width: calc(100% / 3 - 15px);
    flex-direction: column;
    margin: 4px 0;
}
.input-field label{
    font-size: 12px;
    font-weight: 500;
    color: #2e2e2e;
}
.input-field input, select{
    outline: none;
    font-size: 14px;
    font-weight: 400;
    color: #333;
    border-radius: 5px;
    border: 1px solid #aaa;
    padding: 0 15px;
    height: 42px;
    margin: 8px 0;
}
.input-field input :focus,
.input-field select:focus{
    box-shadow: 0 3px 6px rgba(0,0,0,0.13);
}
.input-field select,
.input-field input[type="date"]{
    color: #707070;
}
.input-field input[type="date"]:valid{
    color: #333;
}
.container form button, .backBtn{
    display: flex;
    align-items: center;
    justify-content: center;
    height: 45px;
    max-width: 200px;
    width: 100%;
    border: none;
    outline: none;
    color: #fff;
    border-radius: 5px;
    margin: 25px 0;
    background-color: #4070f4;
    transition: all 0.3s linear;
    cursor: pointer;
}
.container form .btnText{
    font-size: 14px;
    font-weight: 400;
}
form button:hover{
    background-color: #265df2;
}
form button i,
form .backBtn i{
    margin: 0 6px;
}
form .backBtn i{
    transform: rotate(180deg);
}
form .buttons{
    display: flex;
    align-items: center;
}
form .buttons button , .backBtn{
    margin-right: 14px;
}

@media (max-width: 750px) {
    .container form{
        overflow-y: scroll;
    }
    .container form::-webkit-scrollbar{
       display: none;
    }
    /* The "::-webkit-scrollbar" selector targets the scrollbar itself, while the "display: none;" 
    property-value pair sets the display property of the scrollbar to none, effectively hiding it from view. */
    form .fields .input-field{
        width: calc(100% / 2 - 15px);
    }
}

@media (max-width: 550px) {
    form .fields .input-field{
        width: 100%;
    }

}
/* The "form .fields .input-field" selector targets the input field within a form element that has a class of "input-field". 
The "width: 100%;" property-value pair sets the width of the input field to 100%, which ensures that the input field takes up the full width of its container.

By using a media query to target smaller screens, this code ensures that the input fields in the form are optimized for mobile devices, 
which are increasingly important for web design*/

